using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;
using Diagnostics.Tracing.Parsers;
using Diagnostics.Tracing;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.Focus;

    public sealed class FocusTraceEventParser : TraceEventParser
    {
        // EventLogger-Focus
        public static Guid ProviderGuid = new Guid("c6a6890e-d1d1-53ca-7869-b836a18d0650");
        public static string ProviderName = "Microsoft-Windows-Kernel-Process";

        public FocusTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<FocusTraceData> FocusChange
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FocusTraceData(value, 60, 1, "FocusChange", new Guid(), 1, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }

        #region Event ID Definitions
        public const TraceEventID ProcessStartEventID = (TraceEventID)1;
        public const TraceEventID ProcessStopEventID = (TraceEventID)2;
        public const TraceEventID ThreadStartEventID = (TraceEventID)3;
        public const TraceEventID ThreadStopEventID = (TraceEventID)4;
        public const TraceEventID ImageLoadEventID = (TraceEventID)5;
        public const TraceEventID ImageUnloadEventID = (TraceEventID)6;
        public const TraceEventID CpuBasePriorityChangeEventID = (TraceEventID)7;
        public const TraceEventID CpuPriorityChangeEventID = (TraceEventID)8;
        public const TraceEventID PagePriorityChangeEventID = (TraceEventID)9;
        public const TraceEventID IoPriorityChangeEventID = (TraceEventID)10;
        #endregion

        #region private
        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.Focus
{
   
    public sealed class FocusTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }

        #region Private
        internal FocusTraceData(Action<FocusTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FocusTraceData> Action;
        #endregion
    }
}

