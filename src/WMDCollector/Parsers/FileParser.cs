using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;
using Diagnostics.Tracing.Parsers;
using Diagnostics.Tracing;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.File;

    public sealed class FileTraceEventParser : TraceEventParser
    {
        public static string ProviderName = "Microsoft-Windows-Kernel-File";
        // GUID EDD08927-9CC4-4E65-B970-C2560FB5C289
        public static Guid ProviderGuid = new Guid(unchecked((int)0xedd08927), unchecked((short)0x9cc4), unchecked((short)0x4e65), 0xb9, 0x70, 0xc2, 0x56, 0x0f, 0xb5, 0xc2, 0x89);
        public enum Keywords : long
        {
            KERNEL_FILE_KEYWORD_FILENAME = 0x10,
            KERNEL_FILE_KEYWORD_FILEIO = 0x20, //Cleanup, OperationEnd...
            KERNEL_FILE_KEYWORD_OP_END = 0x40,
            KERNEL_FILE_KEYWORD_CREATE = 0x80,
            KERNEL_FILE_KEYWORD_READ = 0x100,
            KERNEL_FILE_KEYWORD_WRITE = 0x200,
            KERNEL_FILE_KEYWORD_DELETE_PATH = 0x400,
            KERNEL_FILE_KEYWORD_RENAME_SETLINK_PATH = 0x800,
            KERNEL_FILE_KEYWORD_CREATE_NEW_FILE = 0x1000,
        };

        public FileTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<NameCreateTraceData> NameCreate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NameCreateTraceData(value, 10, 10, "NameCreate", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<NameCreateTraceData> NameDelete
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NameCreateTraceData(value, 11, 11, "NameDelete", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<CreateTraceData> Create
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateTraceData(value, 12, 12, "Create", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<CleanupTraceData> Cleanup
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CleanupTraceData(value, 13, 13, "Cleanup", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<CleanupTraceData> Close
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CleanupTraceData(value, 14, 14, "Close", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<ReadTraceData> Read
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ReadTraceData(value, 15, 15, "Read", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<ReadTraceData> Write
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ReadTraceData(value, 16, 16, "Write", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<SetInformationTraceData> SetInformation
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SetInformationTraceData(value, 17, 17, "SetInformation", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<SetInformationTraceData> SetDelete
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SetInformationTraceData(value, 18, 18, "SetDelete", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<DirEnumTraceData> DirEnum
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DirEnumTraceData(value, 20, 20, "DirEnum", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<CleanupTraceData> Flush
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CleanupTraceData(value, 21, 21, "Flush", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<SetInformationTraceData> QueryInformation
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SetInformationTraceData(value, 22, 22, "QueryInformation", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<SetInformationTraceData> FSCTL
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SetInformationTraceData(value, 23, 23, "FSCTL", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<OperationEndTraceData> OperationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationEndTraceData(value, 24, 24, "OperationEnd", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<DirEnumTraceData> DirNotify
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DirEnumTraceData(value, 25, 25, "DirNotify", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<DeletePathTraceData> DeletePath
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeletePathTraceData(value, 26, 26, "DeletePath", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<DeletePathTraceData> RenamePath
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeletePathTraceData(value, 27, 27, "RenamePath", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<DeletePathTraceData> SetLinkPath
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeletePathTraceData(value, 28, 28, "SetLinkPath", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<SetInformationTraceData> Rename
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SetInformationTraceData(value, 29, 19, "Rename", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<CreateTraceData> CreateNewFile
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateTraceData(value, 30, 30, "CreateNewFile", new Guid(), 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }

        #region Event ID Definitions
        public const TraceEventID NameCreateEventID = (TraceEventID)10;
        public const TraceEventID NameDeleteEventID = (TraceEventID)11;
        public const TraceEventID CreateEventID = (TraceEventID)12;
        public const TraceEventID CleanupEventID = (TraceEventID)13;
        public const TraceEventID CloseEventID = (TraceEventID)14;
        public const TraceEventID ReadEventID = (TraceEventID)15;
        public const TraceEventID WriteEventID = (TraceEventID)16;
        public const TraceEventID SetInformationEventID = (TraceEventID)17;
        public const TraceEventID SetDeleteEventID = (TraceEventID)18;
        public const TraceEventID DirEnumEventID = (TraceEventID)20;
        public const TraceEventID FlushEventID = (TraceEventID)21;
        public const TraceEventID QueryInformationEventID = (TraceEventID)22;
        public const TraceEventID FSCTLEventID = (TraceEventID)23;
        public const TraceEventID OperationEndEventID = (TraceEventID)24;
        public const TraceEventID DirNotifyEventID = (TraceEventID)25;
        public const TraceEventID DeletePathEventID = (TraceEventID)26;
        public const TraceEventID RenamePathEventID = (TraceEventID)27;
        public const TraceEventID SetLinkPathEventID = (TraceEventID)28;
        public const TraceEventID RenameEventID = (TraceEventID)29;
        public const TraceEventID CreateNewFileEventID = (TraceEventID)30;
        #endregion

        #region private
        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.File
{
    public sealed class NameCreateTraceData : TraceEvent
    {
        public Address FileKey { get { return GetHostPointer(0); } }
        public string FileName { get { return GetUnicodeStringAt(HostOffset(4, 1)); } }

        #region Private
        internal NameCreateTraceData(Action<NameCreateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(4, 1))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(4, 1))));
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FileKey", "FileName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FileKey;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NameCreateTraceData> Action;
        #endregion
    }
    public sealed class CreateTraceData : TraceEvent
    {
        public Address Irp { get { return GetHostPointer(0); } }
        public Address ThreadId { get { return GetHostPointer(HostOffset(4, 1)); } }
        public Address FileObject { get { return GetHostPointer(HostOffset(8, 2)); } }
        public int CreateOptions { get { return GetInt32At(HostOffset(12, 3)); } }
        public int CreateAttributes { get { return GetInt32At(HostOffset(16, 3)); } }
        public int ShareAccess { get { return GetInt32At(HostOffset(20, 3)); } }
        public string FileName { get { return GetUnicodeStringAt(HostOffset(24, 3)); } }

        #region Private
        internal CreateTraceData(Action<CreateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(24, 3))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(24, 3))));
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Irp", "ThreadId", "FileObject", "CreateOptions", "CreateAttributes", "ShareAccess", "FileName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Irp;
                case 1:
                    return ThreadId;
                case 2:
                    return FileObject;
                case 3:
                    return CreateOptions;
                case 4:
                    return CreateAttributes;
                case 5:
                    return ShareAccess;
                case 6:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateTraceData> Action;
        #endregion
    }
    public sealed class CleanupTraceData : TraceEvent
    {
        public Address Irp { get { return GetHostPointer(0); } }
        public Address ThreadId { get { return GetHostPointer(HostOffset(4, 1)); } }
        public Address FileObject { get { return GetHostPointer(HostOffset(8, 2)); } }
        public Address FileKey { get { return GetHostPointer(HostOffset(12, 3)); } }

        #region Private
        internal CleanupTraceData(Action<CleanupTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(16, 4)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(16, 4)));
        }


        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Irp", "ThreadId", "FileObject", "FileKey" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Irp;
                case 1:
                    return ThreadId;
                case 2:
                    return FileObject;
                case 3:
                    return FileKey;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CleanupTraceData> Action;
        #endregion
    }
    public sealed class ReadTraceData : TraceEvent
    {
        public long ByteOffset { get { return GetInt64At(0); } }
        public Address Irp { get { return GetHostPointer(8); } }
        public Address ThreadId { get { return GetHostPointer(HostOffset(12, 1)); } }
        public Address FileObject { get { return GetHostPointer(HostOffset(16, 2)); } }
        public Address FileKey { get { return GetHostPointer(HostOffset(20, 3)); } }
        public int IOSize { get { return GetInt32At(HostOffset(24, 4)); } }
        public int IOFlags { get { return GetInt32At(HostOffset(28, 4)); } }

        #region Private
        internal ReadTraceData(Action<ReadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(32, 4)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(32, 4)));
        }


        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ByteOffset", "Irp", "ThreadId", "FileObject", "FileKey", "IOSize", "IOFlags" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ByteOffset;
                case 1:
                    return Irp;
                case 2:
                    return ThreadId;
                case 3:
                    return FileObject;
                case 4:
                    return FileKey;
                case 5:
                    return IOSize;
                case 6:
                    return IOFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ReadTraceData> Action;
        #endregion
    }
    public sealed class SetInformationTraceData : TraceEvent
    {
        public Address Irp { get { return GetHostPointer(0); } }
        public Address ThreadId { get { return GetHostPointer(HostOffset(4, 1)); } }
        public Address FileObject { get { return GetHostPointer(HostOffset(8, 2)); } }
        public Address FileKey { get { return GetHostPointer(HostOffset(12, 3)); } }
        public Address ExtraInformation { get { return GetHostPointer(HostOffset(16, 4)); } }
        public int InfoClass { get { return GetInt32At(HostOffset(20, 5)); } }

        #region Private
        internal SetInformationTraceData(Action<SetInformationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 5)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 5)));
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Irp", "ThreadId", "FileObject", "FileKey", "ExtraInformation", "InfoClass" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Irp;
                case 1:
                    return ThreadId;
                case 2:
                    return FileObject;
                case 3:
                    return FileKey;
                case 4:
                    return ExtraInformation;
                case 5:
                    return InfoClass;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SetInformationTraceData> Action;
        #endregion
    }
    public sealed class DirEnumTraceData : TraceEvent
    {
        public Address Irp { get { return GetHostPointer(0); } }
        public Address ThreadId { get { return GetHostPointer(HostOffset(4, 1)); } }
        public Address FileObject { get { return GetHostPointer(HostOffset(8, 2)); } }
        public Address FileKey { get { return GetHostPointer(HostOffset(12, 3)); } }
        public int Length { get { return GetInt32At(HostOffset(16, 4)); } }
        public int InfoClass { get { return GetInt32At(HostOffset(20, 4)); } }
        public int FileIndex { get { return GetInt32At(HostOffset(24, 4)); } }
        public string FileName { get { return GetUnicodeStringAt(HostOffset(28, 4)); } }

        #region Private
        internal DirEnumTraceData(Action<DirEnumTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(28, 4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(28, 4))));
        }


        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Irp", "ThreadId", "FileObject", "FileKey", "Length", "InfoClass", "FileIndex", "FileName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Irp;
                case 1:
                    return ThreadId;
                case 2:
                    return FileObject;
                case 3:
                    return FileKey;
                case 4:
                    return Length;
                case 5:
                    return InfoClass;
                case 6:
                    return FileIndex;
                case 7:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DirEnumTraceData> Action;
        #endregion
    }
    public sealed class OperationEndTraceData : TraceEvent
    {
        public Address Irp { get { return GetHostPointer(0); } }
        public Address ExtraInformation { get { return GetHostPointer(HostOffset(4, 1)); } }
        public int Status { get { return GetInt32At(HostOffset(8, 2)); } }

        #region Private
        internal OperationEndTraceData(Action<OperationEndTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 2)));
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Irp", "ExtraInformation", "Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Irp;
                case 1:
                    return ExtraInformation;
                case 2:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OperationEndTraceData> Action;
        #endregion
    }
    public sealed class DeletePathTraceData : TraceEvent
    {
        public Address Irp { get { return GetHostPointer(0); } }
        public Address ThreadId { get { return GetHostPointer(HostOffset(4, 1)); } }
        public Address FileObject { get { return GetHostPointer(HostOffset(8, 2)); } }
        public Address FileKey { get { return GetHostPointer(HostOffset(12, 3)); } }
        public Address ExtraInformation { get { return GetHostPointer(HostOffset(16, 4)); } }
        public int InfoClass { get { return GetInt32At(HostOffset(20, 5)); } }
        public string FilePath { get { return GetUnicodeStringAt(HostOffset(24, 5)); } }

        #region Private
        internal DeletePathTraceData(Action<DeletePathTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(HostOffset(24, 5))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(HostOffset(24, 5))));
        }


        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Irp", "ThreadId", "FileObject", "FileKey", "ExtraInformation", "InfoClass", "FilePath" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Irp;
                case 1:
                    return ThreadId;
                case 2:
                    return FileObject;
                case 3:
                    return FileKey;
                case 4:
                    return ExtraInformation;
                case 5:
                    return InfoClass;
                case 6:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DeletePathTraceData> Action;
        #endregion
    }
}

