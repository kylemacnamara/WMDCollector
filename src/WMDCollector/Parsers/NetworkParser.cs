using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;
using Diagnostics.Tracing;
using Diagnostics.Tracing.Parsers;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.Network;

    public sealed class NetworkTraceEventParser : TraceEventParser
    {
        public static string ProviderName = "Microsoft-Windows-Kernel-Network";
        // GUID 7DD42A49-5329-4832-8DFD-43D979153A88
        public static Guid ProviderGuid = new Guid(unchecked((int)0x7dd42a49), unchecked((short)0x5329), unchecked((short)0x4832), 0x8d, 0xfd, 0x43, 0xd9, 0x79, 0x15, 0x3a, 0x88);
        public enum Keywords : long
        {
            KERNEL_NETWORK_KEYWORD_IPV4 = 0x10,
            KERNEL_NETWORK_KEYWORD_IPV6 = 0x20,
        };

        public NetworkTraceEventParser(TraceEventSource source) : base(source) { }
        public event Action<NetworkTraceData> KERNEL_NETWORK_TASK_TCPIPDataSent
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NetworkTraceData(value, 10, 10, "KERNEL_NETWORK_TASK_TCPIP", new Guid(), 10, "Data sent.", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<NetworkTraceData> KERNEL_NETWORK_TASK_TCPIPDataReceived
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NetworkTraceData(value, 11, 10, "KERNEL_NETWORK_TASK_TCPIP", new Guid(), 11, "Data received.", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<NetworkTraceData> KERNEL_NETWORK_TASK_UDPIPDataSentOverUDPProtocol
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NetworkTraceData(value, 42, 11, "KERNEL_NETWORK_TASK_UDPIP", new Guid(), 42, "Data sent over UDP protocol.", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<NetworkTraceData> KERNEL_NETWORK_TASK_UDPIPDataReceivedOverUDPProtocol
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NetworkTraceData(value, 43, 11, "KERNEL_NETWORK_TASK_UDPIP", new Guid(), 43, "Data received over UDP protocol.", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        public event Action<NetworkTraceData> KERNEL_NETWORK_TASK_TCPIPReconnectattempted
        {
            add
            {
                source.RegisterEventTemplate(new NetworkTraceData(value, 16, 10, "KERNEL_NETWORK_TASK_TCPIP", new Guid(), 16, "Reconnect attempted.", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
         /*
        Event Name KERNEL_NETWORK_TASK_TCPIP/Disconnect issued.
        Opcode 13
        Opcode Name Disconnect issued.
        Event Index 0
        Task 10
        Task Name KERNEL_NETWORK_TASK_TCPIP
         */
        public event Action<NetworkTraceData> KERNEL_NETWORK_TASK_TCPIPDisconnect
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NetworkTraceData(value, 13, 10, "KERNEL_NETWORK_TASK_TCPIP", new Guid(), 13, "Disconnect issued.", ProviderGuid, ProviderName));
            }
            remove
            {
            }
        }
        #region Event ID Definitions
        public const TraceEventID KERNEL_NETWORK_TASK_TCPIPDataSentEventID = (TraceEventID)10;
        public const TraceEventID KERNEL_NETWORK_TASK_TCPIPDataReceivedEventID = (TraceEventID)11;
        public const TraceEventID KERNEL_NETWORK_TASK_UDPIPDataSentOverUDPProtocolEventID = (TraceEventID)42;
        public const TraceEventID KERNEL_NETWORK_TASK_UDPIPDataReceivedOverUDPProtocolEventID = (TraceEventID)43;
        #endregion

        #region private
        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.Network
{
    public sealed class NetworkTraceData : TraceEvent
    {
        public int PID { get { return GetInt32At(0); } }
        public int size { get { return GetInt32At(4); } }
        public int daddr { get { return GetInt32At(8); } }
        public int saddr { get { return GetInt32At(12); } }
        public int dport { get { return GetInt16At(16); } }
        public int sport { get { return GetInt16At(18); } }

        #region Private
        internal NetworkTraceData(Action<NetworkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        protected override void Dispatch()
        {
            Action(this);
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PID", "size", "daddr", "saddr", "dport", "sport" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PID;
                case 1:
                    return size;
                case 2:
                    return daddr;
                case 3:
                    return saddr;
                case 4:
                    return dport;
                case 5:
                    return sport;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NetworkTraceData> Action;
        #endregion
    }
}